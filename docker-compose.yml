# ymlファイルの書き方がversionにより異なるため、明示しておく必要がある

version: "3.8"

# アプリケーションを構成するコンテナの集合体。
services:
  # それぞれのサービスを識別するために名称をつける
  app_php:
    container_name: php_container
    # dockerhubのイメージを直接指定するか、Dockerfileを別途作成してそちらを参照するように指定するかの2パターンがあります。(ビルド時に複雑なことをする場合はDockerfileに記載する必要がある)
    build: ./docker/php
    # Dockerコンテナを使用した開発では、コンテナ内に入って開発作業をする必要があるので、開発に際して作成したファイルやフォルダはホストOS側にも同期が取られる必要があります。volumesでは、ホストOS側のディレクトリ:コンテナ側のディレクトリという形で指定することで同期が取れるようになります。
    volumes:
      - ./:/var/www

  web_nginx:
    container_name: nginx_container
    image: nginx
    # localhost:8030にアクセスすると、dockerコンテナ上で起動したwebサーバーのポート8000番に繋がるという仕組みです(※ホストOS側のポート番号は重複しているとエラーが生じるので注意)
    ports:
      - 8030:8000
    volumes:
      - ./:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf

  # .envファイルの「DB_HOST」とサービス名を合わせる
  db_mysql:
    image: mysql:latest
    container_name: db_container
    environment:
      MYSQL_ROOT_PASSWORD: root
      # .envファイルの「DB_DATABASE」とMYSQL_DATABASEを合わせる
      MYSQL_DATABASE: sample_db
      TZ: "Asia/Tokyo"
      # 文字コード指定
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./docker/db/data:/var/lib/mysql
      - ./docker/db/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./docker/db/sql:/docker-entrypoint-initdb.d
    ports:
      - 3309:3306

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    environment:
      - PMA_ARBITRARY=1
      # dbサーバーのサービス名(db_mysql)を指定する
      - PMA_HOST=db_mysql
      - PMA_USER=root
      - PMA_PASSWORD=root
    ports:
      - 8288:80
    volumes:
      - /sessions
